Contents:

- Overview
- Anatomy of Dockerfile
- Interesting observation


======================================================================================================================================	
Overview
======================================================================================================================================	

Docker exposes its functionality using REST API and run as daemon. Docker is more like a dump worker leveraging Linux kernel
capabilities like cgroug, network namespace etc. The fun is brought by Google. At this point of time, Google runs 2 billion
containers. Docker uses containerd underneath - low level engine under docker. Core docker components are:

	- Docker Engine
	- Docker Client
	- Docker Remote API
	- Docker Images
	- Registries
	- Docker containers




Alternatives to docker:

    - Virtual machine
    	  - Not a great way to package app
	  - Stronger isolation
	  - VMware VIC (boots a photon OS and runs containers) - heavier than regular container but lighter than VM
	  - Kata containers (not docker compliant, but OCI compliant)
    - RedHat Solutions
    	  - Rocket
	  - CRI-O is open source RedHat container manager - a pure container manager
    - Joyent SmartOS and Triton
    - Mesos
    - LXC
    - LXD/OpenVZ






=======================================================================================================================================
Anatomy of Dockerfile
=======================================================================================================================================



-----------------------------
Common template
-----------------------------

FROM ubuntu:16.04 ------------------------------------------ Base image
RUN apt-get update -y && \ --------------------------------- Every command creates a new image and may result in download of a lot of 
                                                             bits if your system is not having it already
    apt-get install -y python-pip && \
    pip install flask && \
    rm -rf /var/lib/apt/lists/*
ENV FLASK_APP=inv.py --------------------------------------- Environment variable! In this case, it is webapp entry point   
COPY . /app 
WORKDIR /app
ENTRYPOINT ["python"] -------------------------------------- Entrypoint
CMD ["-m", "flask", "run", "-h", "0.0.0.0", "-p", "8080"] -- Arguments feeded to entry point
EXPOSE 8080

-----------------------------
Interesting facts
-----------------------------

- If your first line reads: "FROM scratch" then
      - tells that there is no base image. You have to copy each bits!
      - very popular in go
      - more secure







=======================================================================================================================================
Interesting observation
=======================================================================================================================================

- CoreOS (minimal OS) -> Rocket (an alternated for Docker)
- Google invested in CoreOS bought by RedHat which in turn is bought by IBM.
- Docker contributed 5% code in OCI (The Open Container Initiative)
