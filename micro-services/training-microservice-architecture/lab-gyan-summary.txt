The objective of this document is to capture all learning which one gets typically of hands on instead of conceptual understanding of 
the subject only. 

  






=========================================================================================================================================
Amalgation of tools to create dev environment  
=========================================================================================================================================

Steps followed:

  - Created development infrastructure (EC2 instance)
  - Prepared OS (update)
  - Installed tools (installing packages: pip, flask, git
  - Created developer centeric development environment (i.e. venv)
  - Create repository for version control (git init does that :-))
  - Created microservice (simple python program using flask)
  - Deployed and validated its functioning
  
 For some steps, the details are given which can be pretty handy for any development environment.
 
 
 
 
 ----------------------------------------------------------------------
 Created developer centeric development environment (i.e. venv)
 ----------------------------------------------------------------------
  
user@ubuntu:~/trash-can/inv$ virtualenv venv

user@ubuntu:~/trash-can/inv$ ls -laF
total 12
drwxrwxr-x 3 user user 4096 Jan 7 03:08 ./
drwxrwxr-x 3 user user 4096 Jan 7 03:04 ../
drwxrwxr-x 6 user user 4096 Jan 7 03:08 venv/

user@ubuntu:~/trash-can/inv$ ls -lF venv/
total 12
drwxrwxr-x 2 user user 4096 Mar 20 08:30 bin/
drwxrwxr-x 2 user user 4096 Mar 20 08:30 include/
drwxrwxr-x 3 user user 4096 Mar 20 08:30 lib/

user@ubuntu:~/trash-can/inv$ source venv/bin/activate ------------------------ activates the environment with its own set of python interpreter

(venv) user@ubuntu:~/trash-can/inv$ python --version
Python 3.5.2

(venv) user@ubuntu:~/trash-can/inv$ which python
/home/user/trash-can/inv/venv/bin/python

# (venv) user@ubuntu:~/trash-can/inv$ deactivate ----------------------------------- to deactivate venv









----------------------------------------------------------------------
reate repository for version control (git init does that :-))
----------------------------------------------------------------------

For this project we'll use the Git source code control system to ensure that we do not accidentally delete or overwrite our work. 
To begin we'll use the git init command to create a repository for our code:

(venv) user@ubuntu:~/trash-can/inv$ git init
Initialized empty Git repository in /home/user/trash-can/inv/.git/

(venv) ubuntu@ip-172-31-39-201:~/trash-can/inv$ git branch -a
* master

(venv) user@ubuntu:~/trash-can/inv$ git status
On branch master
Initial commit
Untracked files:
(use "git add <file>..." to include in what will be committed)
__pycache__/
inv.py
venv/
nothing added to commit but untracked files present (use "git add" to track)

Adding *.pyc to the .gitignore caused git to no longer show .pyc files in its statistics. This did add the .gitignore file itself to the
list of unchecked in files. Because we don't want to lose this file we should commit it.
Now add the venv/ directory to the ignore list:

(venv) user@ubuntu:~/trash-can/inv$ echo "venv/" >> .gitignore

(venv) user@ubuntu:~/trash-can/inv$

(venv) user@ubuntu:~/trash-can/inv$ git status
On branch master
Initial commit
Untracked files:
(use "git add <file>..." to include in what will be committed)
.gitignore
inv.py
nothing added to commit but untracked files present (use "git add" to track)

(venv) user@ubuntu:~/trash-can/inv$
Now git status shows us only the files that we want to commit to revision control, the Python source code and our .gitignore .
Git allows you to stage a set of files to be committed at once. Stage the .gitignore and the .py file:

(venv) user@ubuntu:~/trash-can/inv$ git add .gitignore

(venv) user@ubuntu:~/trash-can/inv$ git status
On branch master
Initial commit
Changes to be committed:
(use "git rm --cached <file>..." to unstage)
new file: .gitignore
Untracked files:
(use "git add <file>..." to include in what will be committed)
inv.py
(venv) user@ubuntu:~/trash-can/inv$




=========================================================================================================================================
References
=========================================================================================================================================

Git repo creation:
https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-init
